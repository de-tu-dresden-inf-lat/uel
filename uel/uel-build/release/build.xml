<?xml version="1.0" encoding="UTF-8" ?>
<project name="uel-build-release" default="dist" basedir=".">

	<!--
 *
 * @author Julian Mendez
 *
-->

	<!-- For more information about this file, see http://ant.apache.org -->

	<property name="parent.directory" value=".." />
	<property name="project.build.directory" value="${basedir}/target" />

	<!-- Imports 'project.groupId', 'project.artifactId', and 'project.version' properties. -->
	<xmlproperty file="pom.xml" />
	<xmlproperty file="../../pom.xml" />

	<!-- Project-specific properties. -->
	<fail unless="project.groupId">Error: 'project.groupId' is undefined. This property should have the group identifier.</fail>
	<fail unless="project.artifactId">Error: 'project.artifactId' is undefined. This property should have the artifact identifier.</fail>
	<fail unless="project.version">Error: 'project.version' is undefined. This property should have the version number in the form major.minor.patch.</fail>

	<property name="src.directory" value="src" />

	<property name="_root.directory" value="../../" />

	<property name="_release.name" value="uel-${project.version}" />
	<property name="_release.directory" value="${project.build.directory}/release/${_release.name}" />

	<property name="module.0.name" value="uel-type" />
	<property name="module.1.name" value="uel-rule" />
	<property name="module.2.name" value="uel-sat" />
	<property name="module.3.name" value="uel-asp" />
	<property name="module.4.name" value="uel-plugin" />
	<property name="build.0.name" value="library" />
	<property name="build.0.filename" value="uel-${project.version}" />
	<property name="build.1.name" value="plugin" />
	<property name="build.1.filename" value="de.tudresden.inf.lat.uel" />
	<property name="build.2.name" value="standalone" />
	<property name="build.2.filename" value="uel" />


	<!-- Cleans compiled files. -->
	<target name="clean">
		<delete dir="${project.build.directory}" />
	</target>

	<!-- Prepares the jars for the release. -->
	<target name="preparejars">
		<copy todir="${_release.directory}/modules">
			<fileset dir="${_root.directory}/${module.name}/target" includes="${module.name}-${project.version}.jar" />
			<fileset dir="${_root.directory}/${module.name}/target" includes="${module.name}-${project.version}-sources.jar" />
			<fileset dir="${_root.directory}/${module.name}/target" includes="${module.name}-${project.version}-javadoc.jar" />
		</copy>
	</target>

	<!-- Creates the release. -->
	<target name="release">
		<antcall target="preparejars">
			<param name="module.name" value="${module.0.name}" />
		</antcall>
		<antcall target="preparejars">
			<param name="module.name" value="${module.1.name}" />
		</antcall>
		<antcall target="preparejars">
			<param name="module.name" value="${module.2.name}" />
		</antcall>
		<antcall target="preparejars">
			<param name="module.name" value="${module.3.name}" />
		</antcall>
		<antcall target="preparejars">
			<param name="module.name" value="${module.4.name}" />
		</antcall>

		<copy todir="${_release.directory}/${build.0.name}">
			<fileset dir="../${build.0.name}/target" includes="${build.0.filename}.jar" />
			<fileset dir="../${build.0.name}/target" includes="${build.0.filename}-sources.jar" />
			<fileset dir="../${build.0.name}/target" includes="${build.0.filename}-javadoc.jar" />
		</copy>

		<copy todir="${_release.directory}/${build.1.name}">
			<fileset dir="../${build.1.name}/target" includes="${build.1.filename}.jar" />
		</copy>

		<copy todir="${_release.directory}/${build.2.name}">
			<fileset dir="../${build.2.name}/target" includes="${build.2.filename}.jar" />
		</copy>

		<zip destfile="${project.build.directory}/${_release.name}.zip">
			<fileset dir="${_release.directory}/.." includes="${_release.name}/**" />
		</zip>
	</target>

	<target name="dist" depends="release" />

</project>

