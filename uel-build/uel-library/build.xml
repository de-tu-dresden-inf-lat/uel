<?xml version="1.0" encoding="UTF-8" ?>
<project name="uel-library" default="dist" basedir=".">

	<!--
 *
 * @author Julian Mendez
 *
-->

	<!-- For more information about this file, see http://ant.apache.org -->

	<property name="parent.directory" value=".." />
	<property name="project.build.directory" value="${basedir}/target" />

	<!-- Imports 'project.groupId', 'project.artifactId', 'project.version', 
	'project.properties.mainClass', and 'project.properties.bundle.licenses' properties. -->
	<xmlproperty file="pom.xml" />
	<xmlproperty file="../../pom.xml" />

	<!-- Project-specific properties. -->
	<fail unless="project.groupId">Error: 'project.groupId' is undefined. This property should have the group identifier.</fail>
	<fail unless="project.artifactId">Error: 'project.artifactId' is undefined. This property should have the artifact identifier.</fail>
	<fail unless="project.version">Error: 'project.version' is undefined. This property should have the version number in the form major.minor.patch.</fail>
	<fail unless="project.properties.mainClass">Error: 'project.properties.mainClass' is undefined.</fail>
	<fail unless="project.properties.bundle.licenses">Error: 'project.properties.bundle.licenses' is undefined.</fail>

	<property name="src.directory" value="src" />

	<property name="_root.directory" value="../.." />
	<property name="_lib.directory" value="${project.build.directory}/lib" />
	<property name="_targetlib.directory" value="target" />
	<property name="_targetclasses.directory" value="${_targetlib.directory}/classes" />
	<property name="_sources.directory" value="${src.directory}/main/java" />
	<property name="_resources.directory" value="${src.directory}/main/resources" />
	<property name="groupId.directory" value="uel" />
	<property name="repository.directory" value="../target/jars/lib" />
	<property name="project.build.outputDirectory.classes" value="${project.build.directory}/classes" />
	<property name="project.build.outputDirectory.sources" value="${project.build.directory}/sources" />
	<property name="_bundle.directory" value="${project.build.directory}" />
	<property name="_bundle.name" value="uel-${project.version}" />

	<property name="module.0.name" value="uel-type" />
	<property name="module.1.name" value="uel-rule" />
	<property name="module.2.name" value="uel-sat" />
	<property name="module.3.name" value="uel-asp" />
	<property name="module.4.name" value="uel-core" />
	<property name="module.5.name" value="uel-ui" />
	<property name="module.6.name" value="uel-protege" />
	<property name="lastmodule.name" value="${module.6.name}" />

	<!-- Cleans everything. -->
	<target name="clean">
		<delete dir="${project.build.directory}" />
	</target>

	<!-- Copies the compiled classes and the created jars. -->
	<target name="getjar">
		<mkdir dir="${_lib.directory}/${groupId.directory}/${module.name}/${project.version}" />
		<copy todir="${project.build.outputDirectory.classes}">
			<fileset dir="${_root.directory}/${module.name}/${_targetclasses.directory}" />
		</copy>
		<copy todir="${project.build.outputDirectory.classes}" failonerror="false">
			<fileset dir="${_root.directory}/${module.name}/${_resources.directory}" />
		</copy>
		<copy todir="${project.build.outputDirectory.sources}">
			<fileset dir="${_root.directory}/${module.name}/${_sources.directory}" />
		</copy>
		<copy todir="${project.build.outputDirectory.sources}" failonerror="false">
			<fileset dir="${_root.directory}/${module.name}/${_resources.directory}" />
		</copy>
	</target>

	<!-- Compiles all modules and gets their jars. -->
	<target name="getjars">
		<antcall target="getjar">
			<param name="module.name" value="${module.0.name}" />
		</antcall>
		<antcall target="getjar">
			<param name="module.name" value="${module.1.name}" />
		</antcall>
		<antcall target="getjar">
			<param name="module.name" value="${module.2.name}" />
		</antcall>
		<antcall target="getjar">
			<param name="module.name" value="${module.3.name}" />
		</antcall>
		<antcall target="getjar">
			<param name="module.name" value="${module.4.name}" />
		</antcall>
		<antcall target="getjar">
			<param name="module.name" value="${module.5.name}" />
		</antcall>
		<antcall target="getjar">
			<param name="module.name" value="${module.6.name}" />
		</antcall>
	</target>

	<!-- Prepares the local repository. -->
	<target name="getrepository">
		<mkdir dir="${_lib.directory}" />
		<copy todir="${_lib.directory}">
			<fileset dir="${repository.directory}" />
		</copy>
	</target>

	<!-- Creates the jars. -->
	<target name="jars">
		<mkdir dir="${_bundle.directory}" />
		<jar destfile="${_bundle.directory}/${_bundle.name}.jar">
			<fileset dir="${project.build.outputDirectory.classes}" />
			<fileset dir="." includes="${project.properties.bundle.licenses}" />
			<manifest>
				<attribute name="Implementation-Title" value="${project.groupId}" />
				<attribute name="Implementation-Version" value="${project.version}" />
				<attribute name="Main-Class" value="${project.properties.mainClass}" />
			</manifest>
		</jar>
		<jar destfile="${_bundle.directory}/${_bundle.name}-sources.jar">
			<fileset dir="${project.build.outputDirectory.sources}" />
			<fileset dir="." includes="${project.properties.bundle.licenses}" />
			<manifest>
				<attribute name="Implementation-Title" value="${project.groupId}" />
				<attribute name="Implementation-Version" value="${project.version}" />
			</manifest>
		</jar>
		<jar destfile="${_bundle.directory}/${_bundle.name}-javadoc.jar">
			<fileset dir="${_root.directory}/${lastmodule.name}/target/apidocs" />
		</jar>
	</target>

	<target name="dist" depends="clean, getjars, getrepository, jars" />

</project>
